// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"gofriday.dev/awesome/ent/confirmstatus"
	"gofriday.dev/awesome/ent/predicate"
	"gofriday.dev/awesome/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where adds a new predicate for the builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.predicates = append(uu.mutation.predicates, ps...)
	return uu
}

// SetConfirmStatus sets the confirm_status field.
func (uu *UserUpdate) SetConfirmStatus(c confirmstatus.Status) *UserUpdate {
	uu.mutation.SetConfirmStatus(c)
	return uu
}

// SetNillableConfirmStatus sets the confirm_status field if the given value is not nil.
func (uu *UserUpdate) SetNillableConfirmStatus(c *confirmstatus.Status) *UserUpdate {
	if c != nil {
		uu.SetConfirmStatus(*c)
	}
	return uu
}

// ClearConfirmStatus clears the value of confirm_status.
func (uu *UserUpdate) ClearConfirmStatus() *UserUpdate {
	uu.mutation.ClearConfirmStatus()
	return uu
}

// SetResultAt sets the result_at field.
func (uu *UserUpdate) SetResultAt(t time.Time) *UserUpdate {
	uu.mutation.SetResultAt(t)
	return uu
}

// SetNillableResultAt sets the result_at field if the given value is not nil.
func (uu *UserUpdate) SetNillableResultAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetResultAt(*t)
	}
	return uu
}

// ClearResultAt clears the value of result_at.
func (uu *UserUpdate) ClearResultAt() *UserUpdate {
	uu.mutation.ClearResultAt()
	return uu
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uu.hooks) == 0 {
		if err = uu.check(); err != nil {
			return 0, err
		}
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uu.check(); err != nil {
				return 0, err
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.ConfirmStatus(); ok {
		if err := user.ConfirmStatusValidator(v); err != nil {
			return &ValidationError{Name: "confirm_status", err: fmt.Errorf("ent: validator failed for field \"confirm_status\": %w", err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.ConfirmStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldConfirmStatus,
		})
	}
	if uu.mutation.ConfirmStatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: user.FieldConfirmStatus,
		})
	}
	if value, ok := uu.mutation.ResultAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldResultAt,
		})
	}
	if uu.mutation.ResultAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldResultAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// SetConfirmStatus sets the confirm_status field.
func (uuo *UserUpdateOne) SetConfirmStatus(c confirmstatus.Status) *UserUpdateOne {
	uuo.mutation.SetConfirmStatus(c)
	return uuo
}

// SetNillableConfirmStatus sets the confirm_status field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableConfirmStatus(c *confirmstatus.Status) *UserUpdateOne {
	if c != nil {
		uuo.SetConfirmStatus(*c)
	}
	return uuo
}

// ClearConfirmStatus clears the value of confirm_status.
func (uuo *UserUpdateOne) ClearConfirmStatus() *UserUpdateOne {
	uuo.mutation.ClearConfirmStatus()
	return uuo
}

// SetResultAt sets the result_at field.
func (uuo *UserUpdateOne) SetResultAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetResultAt(t)
	return uuo
}

// SetNillableResultAt sets the result_at field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableResultAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetResultAt(*t)
	}
	return uuo
}

// ClearResultAt clears the value of result_at.
func (uuo *UserUpdateOne) ClearResultAt() *UserUpdateOne {
	uuo.mutation.ClearResultAt()
	return uuo
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// Save executes the query and returns the updated entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	if len(uuo.hooks) == 0 {
		if err = uuo.check(); err != nil {
			return nil, err
		}
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uuo.check(); err != nil {
				return nil, err
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			mut = uuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.ConfirmStatus(); ok {
		if err := user.ConfirmStatusValidator(v); err != nil {
			return &ValidationError{Name: "confirm_status", err: fmt.Errorf("ent: validator failed for field \"confirm_status\": %w", err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing User.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := uuo.mutation.ConfirmStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldConfirmStatus,
		})
	}
	if uuo.mutation.ConfirmStatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: user.FieldConfirmStatus,
		})
	}
	if value, ok := uuo.mutation.ResultAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldResultAt,
		})
	}
	if uuo.mutation.ResultAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldResultAt,
		})
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
